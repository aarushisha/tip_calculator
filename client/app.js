class Calculator extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      costs: []
    };
    this.submitTip = this.submitTip.bind(this);
    this.getTips = this.getTips.bind(this);
  }

  componentDidMount() {
    this.getTips();
  }

  getTips() {
    fetch('/getTips').then(data => data.json()).then(tips => this.setState({
      costs: tips
    })).catch(error => console.log(error));
  }

  submitTip() {
    var name = document.getElementById('costName').value;
    var price = parseFloat(document.getElementById('cost').value);
    var percents = document.getElementsByName('percent');

    for (var i = 0; i < percents.length; i++) {
      if (percents[i].checked === true) {
        var percent = parseInt(percents[i].id);
      }
    }

    fetch('/submitTip', {
      method: 'POST',
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        name: name,
        price: price,
        percent: percent
      })
    }).then(data => data.json()).then(data => console.log(data)).then(() => this.getTips());
  }

  render() {
    return React.createElement("div", null, React.createElement("form", null, React.createElement("div", null, "Calculate Tip!"), React.createElement("input", {
      id: "costName",
      type: "text",
      defaultValue: "Name"
    }), React.createElement("br", null), React.createElement("input", {
      id: "cost",
      type: "text",
      defaultValue: "Price",
      maxLength: "6",
      size: "6"
    }), React.createElement("br", null), React.createElement("div", null, React.createElement("input", {
      id: "15",
      type: "radio",
      name: "percent"
    }), React.createElement("label", {
      htmlFor: "15"
    }, "15%"), React.createElement("input", {
      id: "18",
      type: "radio",
      name: "percent"
    }), React.createElement("label", {
      htmlFor: "18"
    }, "18%"), React.createElement("input", {
      id: "20",
      type: "radio",
      name: "percent"
    }), React.createElement("label", {
      htmlFor: "20"
    }, "20%"), React.createElement("input", {
      id: "25",
      type: "radio",
      name: "percent"
    }), React.createElement("label", {
      htmlFor: "25"
    }, "25%"))), React.createElement("br", null), React.createElement("input", {
      id: "calculate",
      type: "submit",
      value: "Calculate Tip!",
      onClick: () => this.submitTip()
    }), React.createElement("div", null, "Tip:         Total:         "), React.createElement(TipTable, {
      costs: this.state.costs
    }));
  }

}

const TipTable = props => {
  return React.createElement("div", null, React.createElement("div", null, "Stored Tips"), props.costs.map(cost => React.createElement("div", null, cost.name, " ", cost.price, " ", cost.tip)));
};

ReactDOM.render(React.createElement(Calculator, null), document.getElementById('root'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3B1YmxpYy9hcHAuanN4Il0sIm5hbWVzIjpbIkNhbGN1bGF0b3IiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsImNvc3RzIiwic3VibWl0VGlwIiwiYmluZCIsImdldFRpcHMiLCJjb21wb25lbnREaWRNb3VudCIsImZldGNoIiwidGhlbiIsImRhdGEiLCJqc29uIiwidGlwcyIsInNldFN0YXRlIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJuYW1lIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInZhbHVlIiwicHJpY2UiLCJwYXJzZUZsb2F0IiwicGVyY2VudHMiLCJnZXRFbGVtZW50c0J5TmFtZSIsImkiLCJsZW5ndGgiLCJjaGVja2VkIiwicGVyY2VudCIsInBhcnNlSW50IiwiaWQiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZW5kZXIiLCJUaXBUYWJsZSIsIm1hcCIsImNvc3QiLCJ0aXAiLCJSZWFjdERPTSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBTixTQUF5QkMsS0FBSyxDQUFDQyxTQUEvQixDQUF5QztBQUN2Q0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxLQUFLLEVBQUU7QUFESSxLQUFiO0FBR0EsU0FBS0MsU0FBTCxHQUFpQixLQUFLQSxTQUFMLENBQWVDLElBQWYsQ0FBb0IsSUFBcEIsQ0FBakI7QUFDQSxTQUFLQyxPQUFMLEdBQWUsS0FBS0EsT0FBTCxDQUFhRCxJQUFiLENBQWtCLElBQWxCLENBQWY7QUFDRDs7QUFFREUsRUFBQUEsaUJBQWlCLEdBQUc7QUFDbEIsU0FBS0QsT0FBTDtBQUNEOztBQUVEQSxFQUFBQSxPQUFPLEdBQUc7QUFDUkUsSUFBQUEsS0FBSyxDQUFDLFVBQUQsQ0FBTCxDQUFrQkMsSUFBbEIsQ0FBdUJDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUFMLEVBQS9CLEVBQ0NGLElBREQsQ0FDTUcsSUFBSSxJQUFJLEtBQUtDLFFBQUwsQ0FBYztBQUMxQlYsTUFBQUEsS0FBSyxFQUFFUztBQURtQixLQUFkLENBRGQsRUFJQ0UsS0FKRCxDQUlPQyxLQUFLLElBQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixLQUFaLENBSmhCO0FBS0Q7O0FBS0RYLEVBQUFBLFNBQVMsR0FBRztBQUNWLFFBQUljLElBQUksR0FBR0MsUUFBUSxDQUFDQyxjQUFULENBQXdCLFVBQXhCLEVBQW9DQyxLQUEvQztBQUNBLFFBQUlDLEtBQUssR0FBR0MsVUFBVSxDQUFDSixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsTUFBeEIsRUFBZ0NDLEtBQWpDLENBQXRCO0FBQ0EsUUFBSUcsUUFBUSxHQUFHTCxRQUFRLENBQUNNLGlCQUFULENBQTJCLFNBQTNCLENBQWY7O0FBRUEsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixRQUFRLENBQUNHLE1BQTdCLEVBQXFDRCxDQUFDLEVBQXRDLEVBQTBDO0FBQ3hDLFVBQUlGLFFBQVEsQ0FBQ0UsQ0FBRCxDQUFSLENBQVlFLE9BQVosS0FBd0IsSUFBNUIsRUFBa0M7QUFDaEMsWUFBSUMsT0FBTyxHQUFHQyxRQUFRLENBQUNOLFFBQVEsQ0FBQ0UsQ0FBRCxDQUFSLENBQVlLLEVBQWIsQ0FBdEI7QUFDRDtBQUNGOztBQUNEdkIsSUFBQUEsS0FBSyxDQUFDLFlBQUQsRUFBZTtBQUNsQndCLE1BQUFBLE1BQU0sRUFBRSxNQURVO0FBRWxCQyxNQUFBQSxPQUFPLEVBQUU7QUFDUCx3QkFBZ0I7QUFEVCxPQUZTO0FBS2xCQyxNQUFBQSxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsU0FBTCxDQUFlO0FBQUNsQixRQUFBQSxJQUFJLEVBQUVBLElBQVA7QUFBYUksUUFBQUEsS0FBSyxFQUFFQSxLQUFwQjtBQUEyQk8sUUFBQUEsT0FBTyxFQUFFQTtBQUFwQyxPQUFmO0FBTFksS0FBZixDQUFMLENBTUdwQixJQU5ILENBTVNDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUFMLEVBTmpCLEVBT0NGLElBUEQsQ0FPT0MsSUFBSSxJQUFJTSxPQUFPLENBQUNDLEdBQVIsQ0FBWVAsSUFBWixDQVBmLEVBUUNELElBUkQsQ0FRTSxNQUFNLEtBQUtILE9BQUwsRUFSWjtBQVNEOztBQUVEK0IsRUFBQUEsTUFBTSxHQUFHO0FBQ1AsV0FDRSxpQ0FDQSxrQ0FDQSxrREFEQSxFQUVBO0FBQU8sTUFBQSxFQUFFLEVBQUMsVUFBVjtBQUFxQixNQUFBLElBQUksRUFBQyxNQUExQjtBQUFpQyxNQUFBLFlBQVksRUFBQztBQUE5QyxNQUZBLEVBR0EsK0JBSEEsRUFJQTtBQUFPLE1BQUEsRUFBRSxFQUFDLE1BQVY7QUFBaUIsTUFBQSxJQUFJLEVBQUMsTUFBdEI7QUFBNkIsTUFBQSxZQUFZLEVBQUMsT0FBMUM7QUFBa0QsTUFBQSxTQUFTLEVBQUcsR0FBOUQ7QUFBaUUsTUFBQSxJQUFJLEVBQUM7QUFBdEUsTUFKQSxFQUtBLCtCQUxBLEVBTUEsaUNBQ0E7QUFBTyxNQUFBLEVBQUUsRUFBQyxJQUFWO0FBQWUsTUFBQSxJQUFJLEVBQUMsT0FBcEI7QUFBNEIsTUFBQSxJQUFJLEVBQUM7QUFBakMsTUFEQSxFQUVBO0FBQU8sTUFBQSxPQUFPLEVBQUM7QUFBZixhQUZBLEVBR0E7QUFBTyxNQUFBLEVBQUUsRUFBQyxJQUFWO0FBQWUsTUFBQSxJQUFJLEVBQUMsT0FBcEI7QUFBNEIsTUFBQSxJQUFJLEVBQUM7QUFBakMsTUFIQSxFQUlBO0FBQU8sTUFBQSxPQUFPLEVBQUM7QUFBZixhQUpBLEVBS0E7QUFBTyxNQUFBLEVBQUUsRUFBQyxJQUFWO0FBQWUsTUFBQSxJQUFJLEVBQUMsT0FBcEI7QUFBNEIsTUFBQSxJQUFJLEVBQUM7QUFBakMsTUFMQSxFQU1BO0FBQU8sTUFBQSxPQUFPLEVBQUM7QUFBZixhQU5BLEVBT0E7QUFBTyxNQUFBLEVBQUUsRUFBQyxJQUFWO0FBQWUsTUFBQSxJQUFJLEVBQUMsT0FBcEI7QUFBNEIsTUFBQSxJQUFJLEVBQUM7QUFBakMsTUFQQSxFQVFBO0FBQU8sTUFBQSxPQUFPLEVBQUM7QUFBZixhQVJBLENBTkEsQ0FEQSxFQWtCQSwrQkFsQkEsRUFtQkE7QUFBTyxNQUFBLEVBQUUsRUFBQyxXQUFWO0FBQXNCLE1BQUEsSUFBSSxFQUFDLFFBQTNCO0FBQW9DLE1BQUEsS0FBSyxFQUFDLGdCQUExQztBQUEyRCxNQUFBLE9BQU8sRUFBRSxNQUFNLEtBQUtqQyxTQUFMO0FBQTFFLE1BbkJBLEVBb0JBLGdFQXBCQSxFQXFCQSxvQkFBQyxRQUFEO0FBQVUsTUFBQSxLQUFLLEVBQUUsS0FBS0YsS0FBTCxDQUFXQztBQUE1QixNQXJCQSxDQURGO0FBeUJEOztBQXhFc0M7O0FBMkV6QyxNQUFNbUMsUUFBUSxHQUFJckMsS0FBRCxJQUFXO0FBQ3hCLFNBQ0UsaUNBQ0EsK0NBREEsRUFFQ0EsS0FBSyxDQUFDRSxLQUFOLENBQVlvQyxHQUFaLENBQWlCQyxJQUFJLElBQUksaUNBQU1BLElBQUksQ0FBQ3RCLElBQVgsT0FBa0JzQixJQUFJLENBQUNsQixLQUF2QixPQUErQmtCLElBQUksQ0FBQ0MsR0FBcEMsQ0FBekIsQ0FGRCxDQURGO0FBT0gsQ0FSRDs7QUFXQUMsUUFBUSxDQUFDTCxNQUFULENBQWdCLG9CQUFDLFVBQUQsT0FBaEIsRUFBZ0NsQixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsTUFBeEIsQ0FBaEMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBDYWxjdWxhdG9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvc3RzOiBbXSxcbiAgICB9XG4gICAgdGhpcy5zdWJtaXRUaXAgPSB0aGlzLnN1Ym1pdFRpcC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0VGlwcyA9IHRoaXMuZ2V0VGlwcy5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5nZXRUaXBzKCk7XG4gIH1cblxuICBnZXRUaXBzKCkge1xuICAgIGZldGNoKCcvZ2V0VGlwcycpLnRoZW4oZGF0YSA9PiBkYXRhLmpzb24oKSlcbiAgICAudGhlbih0aXBzID0+IHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29zdHM6IHRpcHNcbiAgICB9KSlcbiAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpKVxuICB9XG4gIFxuXG5cblxuICBzdWJtaXRUaXAoKSB7XG4gICAgdmFyIG5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29zdE5hbWUnKS52YWx1ZTtcbiAgICB2YXIgcHJpY2UgPSBwYXJzZUZsb2F0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3N0JykudmFsdWUpO1xuICAgIHZhciBwZXJjZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCdwZXJjZW50Jyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBlcmNlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocGVyY2VudHNbaV0uY2hlY2tlZCA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgcGVyY2VudCA9IHBhcnNlSW50KHBlcmNlbnRzW2ldLmlkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZmV0Y2goJy9zdWJtaXRUaXAnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7bmFtZTogbmFtZSwgcHJpY2U6IHByaWNlLCBwZXJjZW50OiBwZXJjZW50fSlcbiAgICB9KS50aGVuKCBkYXRhID0+IGRhdGEuanNvbigpKVxuICAgIC50aGVuIChkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpKVxuICAgIC50aGVuKCgpID0+IHRoaXMuZ2V0VGlwcygpKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgPGZvcm0+XG4gICAgICA8ZGl2PkNhbGN1bGF0ZSBUaXAhPC9kaXY+XG4gICAgICA8aW5wdXQgaWQ9J2Nvc3ROYW1lJyB0eXBlPSd0ZXh0JyBkZWZhdWx0VmFsdWU9XCJOYW1lXCI+PC9pbnB1dD5cbiAgICAgIDxicj48L2JyPlxuICAgICAgPGlucHV0IGlkPSdjb3N0JyB0eXBlPVwidGV4dFwiIGRlZmF1bHRWYWx1ZT1cIlByaWNlXCIgbWF4TGVuZ3RoID0gXCI2XCJzaXplPVwiNlwiPjwvaW5wdXQ+XG4gICAgICA8YnI+PC9icj5cbiAgICAgIDxkaXY+XG4gICAgICA8aW5wdXQgaWQ9JzE1JyB0eXBlPVwicmFkaW9cIiBuYW1lPVwicGVyY2VudFwiPjwvaW5wdXQ+XG4gICAgICA8bGFiZWwgaHRtbEZvcj1cIjE1XCI+MTUlPC9sYWJlbD5cbiAgICAgIDxpbnB1dCBpZD0nMTgnIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJwZXJjZW50XCI+PC9pbnB1dD5cbiAgICAgIDxsYWJlbCBodG1sRm9yPVwiMThcIj4xOCU8L2xhYmVsPlxuICAgICAgPGlucHV0IGlkPScyMCcgdHlwZT1cInJhZGlvXCIgbmFtZT1cInBlcmNlbnRcIj48L2lucHV0PlxuICAgICAgPGxhYmVsIGh0bWxGb3I9XCIyMFwiPjIwJTwvbGFiZWw+XG4gICAgICA8aW5wdXQgaWQ9JzI1JyB0eXBlPVwicmFkaW9cIiBuYW1lPVwicGVyY2VudFwiPjwvaW5wdXQ+XG4gICAgICA8bGFiZWwgaHRtbEZvcj1cIjI1XCI+MjUlPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPC9mb3JtPlxuICAgICAgPGJyPjwvYnI+XG4gICAgICA8aW5wdXQgaWQ9J2NhbGN1bGF0ZScgdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwiQ2FsY3VsYXRlIFRpcCFcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnN1Ym1pdFRpcCgpfT48L2lucHV0PlxuICAgICAgPGRpdj5UaXA6ICAgICAgICAgVG90YWw6ICAgICAgICAgPC9kaXY+XG4gICAgICA8VGlwVGFibGUgY29zdHM9e3RoaXMuc3RhdGUuY29zdHN9Lz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5jb25zdCBUaXBUYWJsZSA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgPGRpdj5TdG9yZWQgVGlwczwvZGl2PlxuICAgICAge3Byb3BzLmNvc3RzLm1hcCggY29zdCA9PiA8ZGl2Pntjb3N0Lm5hbWV9IHtjb3N0LnByaWNlfSB7Y29zdC50aXB9PC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApXG59XG5cblxuUmVhY3RET00ucmVuZGVyKDxDYWxjdWxhdG9yIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTsiXX0=